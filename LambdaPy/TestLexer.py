# Generated from Test.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\34")
        buf.write("\u0098\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\3\2\3\2\3\3\3\3\3\4\3\4")
        buf.write("\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3")
        buf.write("\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23")
        buf.write("\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\5\30x\n")
        buf.write("\30\3\30\7\30{\n\30\f\30\16\30~\13\30\3\31\3\31\7\31\u0082")
        buf.write("\n\31\f\31\16\31\u0085\13\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\5\32\u0090\n\32\3\33\6\33\u0093\n")
        buf.write("\33\r\33\16\33\u0094\3\33\3\33\2\2\34\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\3\2\b\5\2C\\aac|\6\2\62;C\\aac|\3\2\63;\3\2\62;\3")
        buf.write("\2\60\60\5\2\13\f\17\17\"\"\2\u009c\2\3\3\2\2\2\2\5\3")
        buf.write("\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2")
        buf.write("\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2")
        buf.write("\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2")
        buf.write("\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2")
        buf.write("\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3")
        buf.write("\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\3\67\3\2\2\2\59\3\2\2")
        buf.write("\2\7;\3\2\2\2\t=\3\2\2\2\13?\3\2\2\2\rA\3\2\2\2\17C\3")
        buf.write("\2\2\2\21E\3\2\2\2\23J\3\2\2\2\25P\3\2\2\2\27V\3\2\2\2")
        buf.write("\31\\\3\2\2\2\33b\3\2\2\2\35d\3\2\2\2\37f\3\2\2\2!h\3")
        buf.write("\2\2\2#j\3\2\2\2%l\3\2\2\2\'n\3\2\2\2)p\3\2\2\2+r\3\2")
        buf.write("\2\2-t\3\2\2\2/w\3\2\2\2\61\177\3\2\2\2\63\u008f\3\2\2")
        buf.write("\2\65\u0092\3\2\2\2\678\7*\2\28\4\3\2\2\29:\7+\2\2:\6")
        buf.write("\3\2\2\2;<\7}\2\2<\b\3\2\2\2=>\7\177\2\2>\n\3\2\2\2?@")
        buf.write("\7=\2\2@\f\3\2\2\2AB\7?\2\2B\16\3\2\2\2CD\7.\2\2D\20\3")
        buf.write("\2\2\2EF\7k\2\2FG\7p\2\2GH\7v\2\2HI\7:\2\2I\22\3\2\2\2")
        buf.write("JK\7k\2\2KL\7p\2\2LM\7v\2\2MN\7\63\2\2NO\78\2\2O\24\3")
        buf.write("\2\2\2PQ\7k\2\2QR\7p\2\2RS\7v\2\2ST\7\65\2\2TU\7\64\2")
        buf.write("\2U\26\3\2\2\2VW\7k\2\2WX\7p\2\2XY\7v\2\2YZ\78\2\2Z[\7")
        buf.write("\66\2\2[\30\3\2\2\2\\]\7h\2\2]^\7n\2\2^_\7q\2\2_`\7c\2")
        buf.write("\2`a\7v\2\2a\32\3\2\2\2bc\7#\2\2c\34\3\2\2\2de\7\u0080")
        buf.write("\2\2e\36\3\2\2\2fg\7`\2\2g \3\2\2\2hi\7,\2\2i\"\3\2\2")
        buf.write("\2jk\7\61\2\2k$\3\2\2\2lm\7\'\2\2m&\3\2\2\2no\7(\2\2o")
        buf.write("(\3\2\2\2pq\7-\2\2q*\3\2\2\2rs\7/\2\2s,\3\2\2\2tu\7~\2")
        buf.write("\2u.\3\2\2\2vx\t\2\2\2wv\3\2\2\2x|\3\2\2\2y{\t\3\2\2z")
        buf.write("y\3\2\2\2{~\3\2\2\2|z\3\2\2\2|}\3\2\2\2}\60\3\2\2\2~|")
        buf.write("\3\2\2\2\177\u0083\t\4\2\2\u0080\u0082\t\5\2\2\u0081\u0080")
        buf.write("\3\2\2\2\u0082\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083")
        buf.write("\u0084\3\2\2\2\u0084\62\3\2\2\2\u0085\u0083\3\2\2\2\u0086")
        buf.write("\u0087\5\61\31\2\u0087\u0088\t\6\2\2\u0088\u0090\3\2\2")
        buf.write("\2\u0089\u008a\5\61\31\2\u008a\u008b\t\6\2\2\u008b\u008c")
        buf.write("\5\61\31\2\u008c\u0090\3\2\2\2\u008d\u008e\t\6\2\2\u008e")
        buf.write("\u0090\5\61\31\2\u008f\u0086\3\2\2\2\u008f\u0089\3\2\2")
        buf.write("\2\u008f\u008d\3\2\2\2\u0090\64\3\2\2\2\u0091\u0093\t")
        buf.write("\7\2\2\u0092\u0091\3\2\2\2\u0093\u0094\3\2\2\2\u0094\u0092")
        buf.write("\3\2\2\2\u0094\u0095\3\2\2\2\u0095\u0096\3\2\2\2\u0096")
        buf.write("\u0097\b\33\2\2\u0097\66\3\2\2\2\t\2wz|\u0083\u008f\u0094")
        buf.write("\3\b\2\2")
        return buf.getvalue()


class TestLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    ID = 23
    INT = 24
    FLOAT = 25
    WS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'='", "','", "'int8'", "'int16'", 
            "'int32'", "'int64'", "'float'", "'!'", "'~'", "'^'", "'*'", 
            "'/'", "'%'", "'&'", "'+'", "'-'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "ID", "INT", "FLOAT", "WS" ]

    grammarFileName = "Test.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


